package me.codego.view;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.support.annotation.Nullable;
import android.support.v7.widget.AppCompatTextView;
import android.util.AttributeSet;

import me.codego.R;

/**
 * 文字开始位置插入标记
 * Created by mengxn on 2017/4/17.
 */
public class MarkTextView extends AppCompatTextView {

    private Paint mPaint;

    private int mMarkWidth;
    private int mMarkType;
    private int mMarkColor;
    private int mMarkPadding;

    private static final int MARK_TYPE_CIRCLE = 0;
    private static final int MARK_TYPE_LINE = 1;

    public MarkTextView(Context context) {
        this(context, null);
    }

    public MarkTextView(Context context, @Nullable AttributeSet attrs) {
        super(context, attrs);

        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.MarkTextView);
        mMarkWidth = typedArray.getDimensionPixelOffset(R.styleable.MarkTextView_markWidth, 0);
        mMarkColor = typedArray.getColor(R.styleable.MarkTextView_markColor, 0xFFFFFFFF);
        mMarkType = typedArray.getInt(R.styleable.MarkTextView_markType, 0);
        mMarkPadding = typedArray.getDimensionPixelOffset(R.styleable.MarkTextView_markPadding, 0);
        typedArray.recycle();

        setPadding(getPaddingLeft() + mMarkWidth + mMarkPadding, getPaddingTop(), getPaddingTop(), getRight());

        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
        mPaint.setColor(mMarkColor);
        if (mMarkType == MARK_TYPE_CIRCLE) {
            mPaint.setStyle(Paint.Style.FILL);
        } else if (mMarkType == MARK_TYPE_LINE) {
            mPaint.setStrokeCap(Paint.Cap.ROUND);
            mPaint.setStrokeWidth(mMarkWidth);
        }
        setIncludeFontPadding(false);
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        canvas.save();
        canvas.translate(-mMarkWidth - mMarkPadding, 0);
        Paint.FontMetrics fontMetrics = getPaint().getFontMetrics();
        float fontHeight = fontMetrics.bottom - fontMetrics.top;
        if (mMarkType == MARK_TYPE_CIRCLE) {
            canvas.drawCircle(mMarkWidth / 2 + getPaddingLeft(),
                    fontHeight/2 + getPaddingTop(),
                    mMarkWidth / 2, mPaint);
        } else if (mMarkType == MARK_TYPE_LINE) {
            canvas.drawLine(getPaddingLeft() + mMarkWidth / 2,
                    Math.max(mMarkWidth / 2, getPaddingTop()),
                    getPaddingLeft() + mMarkWidth / 2,
                    getLineHeight() - mMarkWidth / 2,
                    mPaint);
        }
        canvas.restore();
    }
}
